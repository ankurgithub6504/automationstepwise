CRTL+SHFT+O
CTRL+SHFT+F


Issue: I was not able to run the cucumber test.
Solution: Need to install/configure cucumber in eclipse from https://github.com/cucumber/cucumber-eclipse-update-site-snapshot.

1- Download/Install the cucumber plugin into your eclipse.
2- Create a project.
3- Create following packages:
	steps - to keep the step definitions java files.
	features - to keep the features file.
	runner - to keep the runner file.
	
4- Create a feature file, example:

Feature: Login to Production

In order to perform successful login to production
As a user
I want to enter correct username and password

Scenario: In order to verify login to google
		Given user navigates to google page
 		When user validates the page title
		Then user enters "valid" username
		And user enters "valid" password
		And user validates the captcha image
		Then user "should" be successfully logged in

5- Write its step definition (i.e. implementation) as:
				
	@Given("^user navigates to google page$")
	public void user_navigates_to_google_page() throws Throwable {
	   System.out.println("Navigating to Google page");
	}

	@When("^user validates the page title$")
	public void user_validates_the_page_title() throws Throwable {
	    System.out.println("Validating page title");
	}

	@Then("^user enters \"([^\"]*)\" username$")
	public void user_enters_valid_username(String username) throws Throwable {
	    System.out.println("Enters valid username "+username);
	}

	@And("^user enters \"([^\"]*)\" password$")
	public void user_enters_valid_password(String password) throws Throwable {
	    System.out.println("Enters valid password "+password);
	}
	
	@And("^user validates the captcha image$")
	public void user_validates_the_captcha_image() throws Throwable {
	    System.out.println("user validates captcha image");
	}

	@Then("^user \"([^\"]*)\" be successfully logged in$")
	public void user_should_be_successfully_logged_in(String validate) throws Throwable {
	    System.out.println(validate+" Logged in");
	}
	
[\"([^\"]*)\"] --> This is for accepting all values.

6- Create cucumber runner for the feature.
7- May create Junit runner as well for running it as Junit. Add Junit as "configure build path -> Add library".

@RunWith(Cucumber.class)
@CucumberOptions(features= {"src/features"},glue= {"steps"}, monochrome=true, tags = {"@sanity, @prod"} )
public class RunCuke {
	
}

8- Run the feature file as cucumber runner, which is going to run the respective feature file only.
9- May run Junit runner as well as "Junit", which is going to run all the feature files.

========================================================================================================================================

Example/parameters in feature file, for your scenario:

@sanity 
Feature: Login

In order to perform successful login
As a user
I want to enter correct username and password

Scenario Outline: In order to verify login to google
		Given user navigates to google page
		When user validates the page title
		Then user enters "<username> " username
		And user enters "<password>" password
		And user selects the age category
		| Age | Location |
		| below 18 | India |
		| above 18 | USA |
		Then user "<loginType>" be successfully logged in
				
Examples:
 | username | password | loginType |
 | valid	| valid	   | should	   |
 | invalid 	| invalid  | shouldnot |
		
----------------------------------------------------------------------------------------

"<username>", "<password>", "<loginType>" --> are examples' parameters, this means, the same feature is going to run two time (mentioned as examples) for "valid" and "invalid" values.

@sanity --> This is for tagging, runner is going to run the tagged features as mentioned above in 7 step.

| Age | Location | --> These are values or list values for the feature-step (selects the age category) which are going to be used by script/user further.

monochrome=true --> To format the result's status.

----------------------------------------------------------------------------------------------------------------
@And("^user selects the age category$")
	public void user_selects_the_age_category(DataTable table) throws Throwable {//List<String> list
		List<Map<String, String>> data = table.asMaps(String.class, String.class);
	    System.out.println("selecting age "+data.get(0).get("Age"));//list.get(1)
	    System.out.println("selecting location "+data.get(0).get("Location"));
	}

===================================================================================================================

Hooks:
import cucumber.api.java.After;
import cucumber.api.java.Before;
@Before
	public void setup() {
		System.out.println("Launching browser");
	}
	
@After
	public void tearDown() {
		System.out.println("Driver quitting");
	}

//Tag to the hooks	--> only tagged feature cases would get execution of @Before/@After
@Before("@prod")
	public void setupProd() {
		System.out.println("PROD --> Launching browser");
	}
	
@After("@prod")
	public void tearDownProd() {
		System.out.println("PROD --> Driver quitting");
	}
	
====================================================================================================================

Cucumber with TestNG:

1- Configure build path for cucumber-testng jar. Take it from Maven.
2- Go to Cuke runner (Junit runner) and remove Junit import statement and do following:

//import org.junit.runner.RunWith;
//import cucumber.api.junit.Cucumber;
import cucumber.api.CucumberOptions;

//@RunWith(Cucumber.class)
@CucumberOptions(features= {"src/features"},glue= {"steps"}, monochrome=true, tags = {"@sanity, @prod"} )
public class RunCuke extends AbstractTestNGCucumberTests {
	
}

3- Create testng.xml file and configure your runner into it.
4- Run your test as testng.

=======================================================================================================================

Cucumber extent reporting:

1- Build path for following jars: cucumber-extentsreport-1.0.0, extentreports-2.41.1, freemarker-2.3.23
2- Configure extent-config.xml file in src.
<?xml version="1.0" encoding="UTF-8"?>
<extentreports>
    <configuration>
        <encoding>UTF-8</encoding>
        <documentTitle>Cucumber Extent Reports - v1.1.0</documentTitle>
        <reportName>Automationstepwise-Cucumber-Report</reportName>
        <reportHeadline> - v1.1.0</reportHeadline>
    </configuration>
</extentreports>

3- Add following to runner:

package runner;

import java.io.File;

import org.junit.BeforeClass;
import org.junit.runner.RunWith;

import cucumber.api.CucumberOptions;
import cucumber.api.junit.Cucumber;

import com.cucumber.listener.ExtentCucumberFormatter;

@RunWith(Cucumber.class)
@CucumberOptions(features = { "src/features" }, 
	glue = { "steps" }, 
	monochrome = true, 
	tags = {"@sanity, @prod" }, 
	plugin = { "pretty", "html:target/cucumber","com.cucumber.listener.ExtentCucumberFormatter" })
public class RunCuke {

	@BeforeClass
	public static void setup() {
		ExtentCucumberFormatter.initiateExtentCucumberFormatter();

		// Loads the extent config xml to customize on the report.
		ExtentCucumberFormatter.loadConfig(new File("src/extent-config.xml"));

		// User can add the system information as follows
		/*
		 * ExtentCucumberFormatter.addSystemInfo("Browser Name", "Firefox");
		 * ExtentCucumberFormatter.addSystemInfo("Browser version", "v47.0.1");
		 * ExtentCucumberFormatter.addSystemInfo("Selenium version", "v2.53.1");
		 */

	}
}

4- Run the program or do the execution.
5- Output folder is created after refreshing project.
6- Copy the path of the report.html and open in browser.

-------------------------

<!-- https://mvnrepository.com/artifact/info.cukes/cucumber-junit -->
<dependency>
    <groupId>info.cukes</groupId>
    <artifactId>cucumber-junit</artifactId>
    <version>1.2.5</version>
    <scope>test</scope>
</dependency>

<!-- https://mvnrepository.com/artifact/info.cukes/cucumber-junit -->
<dependency>
    <groupId>info.cukes</groupId>
    <artifactId>cucumber-junit</artifactId>
    <version>1.2.4</version>
    <scope>test</scope>
</dependency>


<!-- https://mvnrepository.com/artifact/info.cukes/cucumber-java -->
<dependency>
    <groupId>info.cukes</groupId>
    <artifactId>cucumber-java</artifactId>
    <version>1.2.4</version>
</dependency>


<!-- https://mvnrepository.com/artifact/info.cukes/cucumber-core -->
<dependency>
    <groupId>info.cukes</groupId>
    <artifactId>cucumber-core</artifactId>
    <version>1.2.4</version>
</dependency>


<!-- https://mvnrepository.com/artifact/info.cukes/cucumber-html -->
<dependency>
    <groupId>info.cukes</groupId>
    <artifactId>cucumber-html</artifactId>
    <version>0.2.6</version>
</dependency>

<!-- https://mvnrepository.com/artifact/info.cukes/cucumber-html -->
<dependency>
    <groupId>info.cukes</groupId>
    <artifactId>cucumber-html</artifactId>
    <version>0.2.3</version>
</dependency>



<!-- https://mvnrepository.com/artifact/info.cukes/cucumber-jvm-deps -->
<dependency>
    <groupId>info.cukes</groupId>
    <artifactId>cucumber-jvm-deps</artifactId>
    <version>1.0.5</version>
    <scope>provided</scope>
</dependency>


<!-- https://mvnrepository.com/artifact/info.cukes/gherkin -->
<dependency>
    <groupId>info.cukes</groupId>
    <artifactId>gherkin</artifactId>
    <version>2.12.2</version>
    <scope>provided</scope>
</dependency>

<!-- https://mvnrepository.com/artifact/info.cukes/cucumber-testng -->
<dependency>
    <groupId>info.cukes</groupId>
    <artifactId>cucumber-testng</artifactId>
    <version>1.2.4</version>
</dependency>
